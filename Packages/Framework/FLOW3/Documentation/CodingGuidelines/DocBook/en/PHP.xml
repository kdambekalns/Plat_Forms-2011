<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="flow3.codingguidelines"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xl="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:xhtml="http://www.w3.org/1999/xhtml"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns="http://docbook.org/ns/docbook"
          xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>PHP Coding Guidelines &amp; Best Practices</title>

  <para>Coding Standards are an important factor for achieving a high code
  quality. A common visual style, naming conventions and other technical
  settings allow us to produce a homogenous code which is easy to read and
  maintain. However, not all important factors can be covered by rules and
  coding standards. Equally important is the style in which certain problems
  are solved programmatically - it's the personality and experience of the
  individual developer which shines through and ultimately makes the
  difference between technically okay code or a well considered, mature
  solution.</para>

  <para>These guidelines try to cover both, the technical standards as well as
  giving incentives for a common development style. These guidelines must be
  followed by everyone who creates code for the FLOW3 core. Because TYPO3 is
  based on FLOW3, it follows the same principles - therefore, whenever we
  mention FLOW3 in the following sections, we equally refer to TYPO3. We hope
  that you feel encouraged to follow these guidelines as well when creating
  your own packages and FLOW3 based applications.</para>

  <section xml:id="flow3.codingguidelines.formattingandlayout">
    <title>Code Formatting and Layout</title>

    <subtitle>aka "beautiful code"</subtitle>

    <para>The visual style of programming code is very important. In the TYPO3
    project we want many programmers to contribute, but in the same style.
    This will help us to:</para>

    <itemizedlist>
      <listitem>
        <para>Easily read/understand each others code and consequently easily
        spot security problems or optimization opportunities</para>
      </listitem>

      <listitem>
        <para>It is a signal about consistency and cleanliness, which is a
        motivating factor for programmers striving for excellence</para>
      </listitem>
    </itemizedlist>

    <para>Some people may object to the visual guidelines since everyone has
    his own habits. You will have to overcome that in the case of FLOW3; the
    visual guidelines must be followed along with coding guidelines for
    security. We want all contributions to the project to be as similar in
    style and as secure as possible.</para>

    <section>
      <title>General considerations</title>

      <itemizedlist>
        <listitem>
          <para>Almost every PHP file in FLOW3 contains exactly one class and
          does not output anything if it is called directly. Therefore you
          start your file with a <code>&lt;?php</code> tag and end it with the
          closing <code>?&gt;</code>.</para>
        </listitem>

        <listitem>
          <para>Every file must contain a header stating encoding, namespace
          and licensing information</para>

          <para><orderedlist>
              <listitem>
                <para>Declare your namespace. The namespace must start with
                "F3"!</para>
              </listitem>

              <listitem>
                <para>The copyright header itself must not start with
                <literal>/**</literal>, as this may confuse documentation
                generators!</para>
              </listitem>
            </orderedlist></para>

          <example>
            <title>The FLOW3 standard file header</title>

            <programlisting language="php">&lt;?php
declare(ENCODING = 'utf-8');
namespace F3\Your\Stuff\Here;

/*                                                                        *
 * This script belongs to the FLOW3 framework.                            *
 *                                                                        *
 * It is free software; you can redistribute it and/or modify it under    *
 * the terms of the GNU Lesser General Public License as published by the *
 * Free Software Foundation, either version 3 of the License, or (at your *
 * option) any later version.                                             *
 *                                                                        *
 * This script is distributed in the hope that it will be useful, but     *
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-    *
 * TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser       *
 * General Public License for more details.                               *
 *                                                                        *
 * You should have received a copy of the GNU Lesser General Public       *
 * License along with the script.                                         *
 * If not, see http://www.gnu.org/licenses/lgpl.html                      *
 *                                                                        *
 * The TYPO3 project - inspiring people to share!                         *
 *                                                                        */</programlisting>
          </example>
        </listitem>

        <listitem>
          <para>Code lines are of arbitrary length, no strict limitations to
          80 characters or something similar (wake up, graphical displays have
          been available for decades now...). But feel free to break lines for
          better readability if you think it makes sense!</para>
        </listitem>

        <listitem>
          <para>Lines end with a newline a.k.a <code>chr(10)</code> - UNIX
          style</para>
        </listitem>

        <listitem>
          <para>Files must be encoded in UTF-8</para>
        </listitem>
      </itemizedlist>

      <para>Make sure you use the correct license and mention the correct
      package in the header, See <link
      xl:href="http://forge.typo3.org/wiki/flow3-overview/Licensing_boilerplates_to_use_with_your_code">http://forge.typo3.org/wiki/flow3-overview/Licensing_boilerplates_to_use_with_your_code</link>
      for some boilerplate text.</para>
    </section>

    <section>
      <title>Indentation and line formatting</title>

      <para>Indentation is done with tabs - and not spaces! The beginning of a
      line is the only place where tabs are used, in all other places use
      spaces. Always trim whitespace off the end of a line.</para>

      <para>Here's a code snippet which shows the correct usage of tabs and
      spaces:</para>

      <para><example>
          <title>Correct use of tabs and spaces</title>

          <programlisting language="php">/**
 * Returns the name of the currently set context.
 *
 * @return string Name of the current context
 * @author Your Name &lt;your@email.here&gt;
 */
public function getContextName() {
»   return $this-&gt;contextName;
}</programlisting>
        </example></para>

      <para>There seem to be very passionate opinions about whether TABs or
      spaces should be used for indentation of code blocks in the scripts. If
      you'd like to read more about this religious discussion, you find some
      nice arguments in the <link
      xl:href="http://discuss.fogcreek.com/joelonsoftware/default.asp?cmd=show&amp;ixPost=3978">Joels
      on Software forum</link>.</para>
    </section>

    <section>
      <title>Naming</title>

      <para>Naming is a repeatedly undervalued factor in the art of software
      development. Although everybody seems to agree on that nice names are a
      nice thing to have, most developers choose cryptic abbreviations in the
      end (to save some typing). Beware that we TYPO3 core developers are very
      passionate about naming (some people call it fanatic, well ...). In our
      opinion spending 15 minutes (or more ...) just to find a good name for a
      method is well spent time! There are zillions of reasons for using
      proper names and in the end they all lead to better readable,
      manageable, stable and secure code.</para>

      <para>As a general note, english words (or abbreviations if neccessary)
      must be used for all class names, method names, comments, variables
      names, database table and field names. Although PHP6 allows for using
      funny japanese, tibetian or don't-know-what characters, the consensus is
      that english is much better to read for the most of us.</para>

      <para>When using abbreviations or acronyms remember to make them
      camel-cased as needed, no all-uppercase stuff. Admittedly there are a
      few places where we violate that rule willingly (FLOW3, TYPO3 – will not
      change) and historically (e.g. AOP – might change).</para>

      <section>
        <title>Package names</title>

        <para>All package names are start with an uppercase character and
        usually are written in <package>UpperCamelCase</package>. In order to
        avoid problems with different filesystems, only the characters a-z,
        A-Z, 0-9 and the dash sign "-" are allowed for package names – don't
        use special characters.</para>
      </section>

      <section>
        <title>Namespace and Class names</title>

        <para><itemizedlist>
            <listitem>
              <para>Only the characters a-z, A-Z and 0-9 are allowed for
              namespace and class names.</para>
            </listitem>

            <listitem>
              <para>Namespaces are usually written in UpperCamelCase but
              variations are allowed for well established names and
              abbreviations.</para>
            </listitem>

            <listitem>
              <para>Class names are always written in
              <classname>UpperCamelCase</classname>.</para>
            </listitem>

            <listitem>
              <para>The unqualified class name must be meant literally even
              without the namespace.</para>
            </listitem>

            <listitem>
              <para>The main purpose of namespaces is categorization and
              ordering</para>
            </listitem>

            <listitem>
              <para>Class names must be nouns, never adjectives.</para>
            </listitem>

            <listitem>
              <para>The name of abstract classes must start with the word
              "Abstract", class names of aspects must end with the word
              "Aspect".</para>
            </listitem>
          </itemizedlist></para>

        <para>A few examples:</para>

        <table>
          <title>Incorrect naming of namespaces and classes</title>

          <tgroup cols="3">
            <colspec colwidth="3*"/>

            <colspec colwidth="2*"/>

            <colspec colwidth="5*"/>

            <thead>
              <row>
                <entry>Fully qualified class name</entry>

                <entry>Unqualified class name</entry>

                <entry>Remarks</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>\F3\FLOW3\Session\Php</entry>

                <entry>Php</entry>

                <entry>The class is not a representation of PHP!</entry>
              </row>

              <row>
                <entry>\F3\FLOW3\Cache\Backend\File</entry>

                <entry>File</entry>

                <entry>The class doesn't represent a file!</entry>
              </row>

              <row>
                <entry>\F3\FLOW3\Session\Interface</entry>

                <entry>Interface</entry>

                <entry>Not allowed, "Interface" is a reserved keyword</entry>
              </row>

              <row>
                <entry>\F3\Foo\Controller\Default</entry>

                <entry>Default</entry>

                <entry>Not allowed, "Default" is a reserved keyword</entry>
              </row>

              <row>
                <entry>\F3\FLOW3\Object\Manager</entry>

                <entry>Manager</entry>

                <entry>Just "Manager" is too fuzzy</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <table>
          <title>Correct naming of namespaces and classes</title>

          <tgroup cols="3">
            <colspec colwidth="3*"/>

            <colspec colwidth="2*"/>

            <colspec colwidth="5*"/>

            <thead>
              <row>
                <entry>Fully qualified class name</entry>

                <entry>Unqualified class name</entry>

                <entry>Remarks</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>\F3\FLOW3\Session\PhpSession</entry>

                <entry>PHPSession</entry>

                <entry>That's a PHP Session</entry>
              </row>

              <row>
                <entry>\F3\FLOW3\Cache\Backend\FileBackend</entry>

                <entry>FileBackend</entry>

                <entry>A File Backend</entry>
              </row>

              <row>
                <entry>\F3\FLOW3\Session\SessionInterface</entry>

                <entry>SessionInterface</entry>

                <entry>Interface for a session</entry>
              </row>

              <row>
                <entry>\F3\Foo\Controller\StandardController</entry>

                <entry>StandardController</entry>

                <entry>The standard controller</entry>
              </row>

              <row>
                <entry>\F3\FLOW3\Object\ObjectManager</entry>

                <entry>ObjectController</entry>

                <entry>"ObjectManager" is clearer</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <table>
          <title>Edge cases in naming of namespaces and classes</title>

          <tgroup cols="3">
            <colspec colwidth="3*"/>

            <colspec colwidth="2*"/>

            <colspec colwidth="5*"/>

            <thead>
              <row>
                <entry>Fully qualified class name</entry>

                <entry>Unqualified class name</entry>

                <entry>Remarks</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>\F3\FLOW3\MVC\ControllerInterface</entry>

                <entry>ControllerInterface</entry>

                <entry>Consequently the interface belongs to all the
                controllers in the Controller sub namespace</entry>
              </row>

              <row>
                <entry>\F3\FLOW3\MVC\Controller\ControllerInterface</entry>

                <entry/>

                <entry>Better</entry>
              </row>

              <row>
                <entry>\F3\FLOW3\Cache\AbstractBackend</entry>

                <entry>AbstractBackend</entry>

                <entry>Same here: In reality this class belongs to the
                backends</entry>
              </row>

              <row>
                <entry>\F3\FLOW3\Cache\Backend\AbstractBackend</entry>

                <entry/>

                <entry>Better</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <note>
          <para>When specifying class names to PHP, always reference the
          global namespace inside namespaced code by using a leading
          backslash. When referencing a class name inside a string (e.g. given
          to the <methodname>create</methodname>-Method of the
          <classname>ObjectManager</classname>, in pointcut expressions or in
          YAML files), never use a leading backslash. This follows the native
          PHP notion of names in strings always being seen as fully
          qualified.</para>
        </note>
      </section>

      <section>
        <title>Interface names</title>

        <para>Only the characters a-z, A-Z and 0-9 are allowed for interface
        names – don't use special characters.</para>

        <para>All interface names are written in
        <classname>UpperCamelCase</classname>. Interface names must be
        adjectives or nouns and have the Interface suffix. A few examples
        follow:</para>

        <example>
          <title>Correct naming of interfaces</title>

          <itemizedlist>
            <listitem>
              <para><classname>\F3\FLOW3\Object\ObjectInterface</classname></para>
            </listitem>

            <listitem>
              <para><classname>\F3\FLOW3\Object\ObjectManagerInterface</classname></para>
            </listitem>

            <listitem>
              <para><classname>\F3\MyPackage\MyObject\MySubObjectInterface</classname></para>
            </listitem>

            <listitem>
              <para><classname>\F3\MyPackage\MyObject\MyHtmlParserInterface</classname></para>
            </listitem>
          </itemizedlist>
        </example>
      </section>

      <section>
        <title>Exception names</title>

        <para>Exception naming basically follows the rules for naming classes.
        There are two possible types of exceptions: generic exceptions and
        specific exceptions. Generic exceptions should be named "Exception"
        preceeded by their namespace. Specific exceptions should reside in
        their own sub-namespace end with the word
        <literal>Exception</literal>.</para>

        <example>
          <title>Correct naming of exceptions</title>

          <itemizedlist>
            <listitem>
              <para><classname>\F3\FLOW3\Object\Exception</classname></para>
            </listitem>

            <listitem>
              <para><classname>\F3\FLOW3\Object\Exception\InvalidClassNameException</classname></para>
            </listitem>

            <listitem>
              <para><classname>\F3\MyPackage\MyObject\Exception</classname></para>
            </listitem>

            <listitem>
              <para><classname>\F3\MyPackage\MyObject\Exception\OutOfCoffeeException</classname></para>
            </listitem>
          </itemizedlist>
        </example>
      </section>

      <section>
        <title>Method names</title>

        <para>All method names are written in lowerCamelCase. In order to
        avoid problems with different filesystems, only the characters a-z,
        A-Z and 0-9 are allowed for method names – don't use special
        characters.</para>

        <para>Make method names descriptive, but keep them concise at the same
        time. Constructors must always be called
        <function>__construct()</function>, never use the class name as a
        method name.</para>

        <para>A few examples:</para>

        <example>
          <title>Correct naming of methods</title>

          <itemizedlist>
            <listitem>
              <para><methodname>myMethod()</methodname></para>
            </listitem>

            <listitem>
              <para><methodname>someNiceMethodName()</methodname></para>
            </listitem>

            <listitem>
              <para><methodname>betterWriteLongMethodNamesThanNamesNobodyUnderstands()</methodname></para>
            </listitem>

            <listitem>
              <para><methodname>singYmcaLoudly()</methodname></para>
            </listitem>

            <listitem>
              <para><methodname>__construct()</methodname></para>
            </listitem>
          </itemizedlist>
        </example>
      </section>

      <section>
        <title>Variable names</title>

        <para>Variable names are written in <varname>lowerCamelCase</varname>
        and should be</para>

        <itemizedlist>
          <listitem>
            <para>self-explaining</para>
          </listitem>

          <listitem>
            <para>not shortened beyond recognition, but rather longer if it
            makes their meaning clearer</para>
          </listitem>
        </itemizedlist>

        <para>The following example shows two variables with the same meaning
        but different naming. You'll surely agree the longer versions are
        better (don't you ...?).</para>

        <example>
          <title>Correct naming of variables</title>

          <itemizedlist>
            <listitem>
              <para><varname>$singletonObjectsRegistry</varname></para>
            </listitem>

            <listitem>
              <para><varname>$argumentsArray</varname></para>
            </listitem>

            <listitem>
              <para><varname>$aLotOfHTMLCode</varname></para>
            </listitem>
          </itemizedlist>
        </example>

        <example>
          <title>Incorrect naming of variables</title>

          <itemizedlist>
            <listitem>
              <para><varname>$sObjRgstry</varname></para>
            </listitem>

            <listitem>
              <para><varname>$argArr</varname></para>
            </listitem>

            <listitem>
              <para><varname>$cx</varname></para>
            </listitem>
          </itemizedlist>
        </example>

        <para>As a special exception you may use variable names like
        <varname>$i</varname>, <varname>$j</varname> and <varname>$k</varname>
        for numeric indexes in <function>for</function> loops if it's clear
        what they mean on the first sight. But even then you should want to
        avoid them...</para>
      </section>

      <section>
        <title>Constant names</title>

        <para>All constant names are written in
        <constant>UPPERCASE</constant>. This includes
        <constant>TRUE</constant>, <constant>FALSE</constant> and
        <constant>NULL</constant>. Words can be separated by underscores - you
        can also use the underscore to group constants thematically:</para>

        <example>
          <title>Correct naming of constants</title>

          <itemizedlist>
            <listitem>
              <para><constant>STUFF_LEVEL</constant></para>
            </listitem>

            <listitem>
              <para><constant>COOLNESS_FACTOR</constant></para>
            </listitem>

            <listitem>
              <para><constant>PATTERN_MATCH_EMAILADDRESS</constant></para>
            </listitem>

            <listitem>
              <para><classname>PATTERN_MATCH_VALIDHTMLTAGS</classname></para>
            </listitem>
          </itemizedlist>
        </example>

        <para>It is, by the way, a good idea to use constants for defining
        regular expression patterns (as seen above) instead of defining them
        somewhere in your code.</para>
      </section>

      <section>
        <title>File names</title>

        <para>These are the rules for naming files:</para>

        <itemizedlist>
          <listitem>
            <para>All file names are
            <filename>UpperCamelCase</filename>.</para>
          </listitem>

          <listitem>
            <para>Class and interface files are named according to the class
            or interface they represent</para>
          </listitem>

          <listitem>
            <para>Each file must contain only one class or interface</para>
          </listitem>

          <listitem>
            <para>Names of files containing code for unit tests must be the
            same as the class which is tested, appended with
            "Test.php".</para>
          </listitem>

          <listitem>
            <para>Files are placed in a directory structure representing the
            namespace structure.</para>
          </listitem>
        </itemizedlist>

        <para>Here are some examples:<example>
            <title>File naming in FLOW3</title>

            <para><itemizedlist>
                <listitem>
                  <para><filename>TemplateEngine/TemplateEngineInterface.php</filename></para>

                  <para>Contains the interface
                  <classname>\F3\TemplateEngine\TemplateEngineInterface</classname>
                  which is part of the package
                  <package>\F3\TemplateEngine</package></para>
                </listitem>

                <listitem>
                  <para><filename>Error/RuntimeException.php</filename></para>

                  <para>Contains the
                  <classname>\F3\Error\RuntimeException</classname> being a
                  part of the package <package>\F3\Error</package></para>
                </listitem>

                <listitem>
                  <para><filename>DataAccess/Manager.php</filename></para>

                  <para>Contains class
                  <classname>\F3\DataAccess\Manager</classname> which is part
                  of the package <package>\F3\DataAccess</package></para>
                </listitem>

                <listitem>
                  <para><filename>FLOW3/Package/PackageManager.php</filename></para>

                  <para>Contains the class
                  <classname>\F3\FLOW3\Package\PackageManager</classname>
                  which is part of the package
                  <package>\F3\FLOW3\Package</package></para>
                </listitem>

                <listitem>
                  <para><filename>Package/PackageManagerTest.php</filename></para>

                  <para>Contains the class
                  <classname>\F3\FLOW3\Package\PackageManagerTest</classname>
                  which is a test case for PHPUnit.</para>
                </listitem>
              </itemizedlist></para>
          </example></para>
      </section>
    </section>

    <section>
      <title>PHP code formatting</title>

      <section>
        <title>Inline comments</title>

        <para>Inline comments must be indented one level more than surrounding
        source code. For documentation comments see <link
        linkend="flow3.codingguidelines.sourcecodedocumentation">Source Code
        Documentation</link>.</para>
      </section>

      <section>
        <title>Strings</title>

        <para>In general, we use single quotes to enclose literal
        strings:<example>
            <title>String literals</title>

            <programlisting language="php">$vision = 'Inspiring people to share';</programlisting>
          </example></para>

        <para>If you'd like to insert values from variables, concatenate
        strings:<example>
            <title>Variable substitution</title>

            <programlisting language="php">$message = 'Hey ' . $name . ', you look ' . $look . ' today!';</programlisting>
          </example></para>

        <para>A space must be inserted before and after the dot for better
        readability:<example>
            <title>Concatenated strings</title>

            <programlisting language="php">$vision = 'Inspiring people ' . 'to share.';</programlisting>
          </example></para>

        <para>You may break a string into multiple lines if you use the dot
        operator. You'll have to indent each following line to mark them as
        part of the value assignment:<example>
            <title>Multi-line strings</title>

            <programlisting language="php">$vision = 'Inspiring' .
   'people ' .
   'to ' .
   'share';</programlisting>
          </example></para>
      </section>

      <section>
        <title>Arrays</title>

        <para/>
      </section>

      <section>
        <title>Classes</title>

        <para>...<example>
            <title>Classes</title>

            <programlisting language="php">namespace F3\MyPackage;

class MyObject {

}</programlisting>
          </example></para>
      </section>

      <section>
        <title>Functions and methods</title>

        <para/>
      </section>

      <section>
        <title>if statements</title>

        <para><itemizedlist>
            <listitem>
              <para>There needs to be one space between the
              <function>if</function> keyword and the opening brace "(" of the
              test expression</para>
            </listitem>

            <listitem>
              <para>After the closing brace ")" of the test expression follows
              one space before the curly brace "{"</para>
            </listitem>

            <listitem>
              <para><function>else</function> and <function>elseif</function>
              are on the same line as their corresponding curly braces</para>
            </listitem>
          </itemizedlist><example>
            <title>if statements</title>

            <programlisting language="php">if ($something || $somethingElse) {
   doThis();
} else {
   doSomethingElse();
}

   // one liners - exception for throw statements!
if (allGoesWrong() === TRUE) throw new \Exception('Hey, all went wrong!', 123);

if (weHaveALotOfCriteria() === TRUE
   &amp;&amp; notEverythingFitsIntoOneLine() === TRUE
   || youJustTendToLikeIt() === TRUE) {
      doThis();

} else {
   ...
}</programlisting>
          </example></para>
      </section>

      <section>
        <title>switch statements</title>

        <para><itemizedlist>
            <listitem>
              <para>There needs to be one space between the
              <function>if</function> keyword and the opening brace "(" of the
              test expression</para>
            </listitem>

            <listitem>
              <para>After the closing brace ")" of the test expression follows
              one space before the curly brace "{"</para>
            </listitem>

            <listitem>
              <para><function>break</function> is indented to the same level
              as <function>case</function> keywords</para>
            </listitem>
          </itemizedlist><example>
            <title>if statements</title>

            <programlisting language="php">switch ($something) {
   case FOO:
      $this-&gt;handleFoo();
   break;
   case BAR:
      $this-&gt;handleBar();
   break;
   default:
      $this-&gt;handleDefault();
}
</programlisting>
          </example></para>
      </section>
    </section>
  </section>

  <section xml:id="flow3.codingguidelines.developmentprocess">
    <title>Development Process</title>

    <section>
      <title>Test-Driven Development</title>

      <para>In a nutshell: before coding a feature or fixing a bug, write an
      unit test.</para>

      <para>Whatever you do: before committing changes to the repository, run
      all unit tests to make sure nothing is broken!</para>
    </section>

    <section>
      <title>Commit Messages</title>

      <para>To have a clear and focused history of code changes is greatly
      helped by using a consistent way of writing commit messages. Because of
      this and to help with (partly) automated generation of change logs for
      each release we have defined a fixed syntax for commit messages that is
      to be used.</para>

      <note>
        <para>Never commit without a commit message explaining the
        commit!</para>
      </note>

      <para>The syntax is as follows:<itemizedlist>
          <listitem>
            <para>One line with a short summary, no full stop at the end. If
            the change breaks things on the user side, start the line
            with<variablelist>
                <varlistentry>
                  <term><markup>[!!!]</markup></term>

                  <listitem>
                    <para>A breaking change that needs human action when
                    updating.</para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </listitem>

          <listitem>
            <para>Then followed by one or more of the following
            codes:<variablelist>
                <varlistentry>
                  <term><markup>[FEATURE]</markup></term>

                  <listitem>
                    <para>A feature change. Most likely it will be an added
                    feature, but it could also be removed. For additions there
                    should be a corresponding ticket in the issue
                    tracker.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><markup>[BUGFIX]</markup></term>

                  <listitem>
                    <para>A fix for a bug. There should be a ticket
                    corresponding to this in the issue tracker as well as a
                    (new) unit test for the fix.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><markup>[API]</markup></term>

                  <listitem>
                    <para>An API change, that is methods have been added or
                    removed; method signatures or return types have changed.
                    This only refers to the public API, i.e. methods tagged
                    with @api (currently we still use it inverted, everything
                    not in the public API is tagged @internal).</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><markup>[CONFIGURATION]</markup></term>

                  <listitem>
                    <para>Some configuration change. That could be a changed
                    default value, a new setting or the removal of some
                    setting that used to exist.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><markup>[TASK]</markup></term>

                  <listitem>
                    <para>Anything not covered by the above categories, e.g.
                    coding style cleanup. Usually only used if there's no
                    corresponding ticket.</para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </listitem>

          <listitem>
            <para>The codes are prefixed by one of the following
            modifiers:<variablelist>
                <varlistentry>
                  <term><markup>+</markup></term>

                  <listitem>
                    <para>Something has been added: a new method,
                    configuration setting or feature. For bug fixes it means
                    the bug was positively fixed (fixes the ticket).</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><markup>-</markup></term>

                  <listitem>
                    <para>Something has been removed. For bug fixes it means
                    the big fix has been reverted (need to re-open the
                    ticket).</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><markup>~</markup></term>

                  <listitem>
                    <para>Something has been changed. For bug fixes it means
                    some change related to the issue, possibly even after it
                    was closed.</para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </listitem>

          <listitem>
            <para>The prefix is followed by the package key and (in round
            brackets) the subpackage if applicable. For FLOW3 the subpackage
            corresponds to the category in the issue tracker.</para>
          </listitem>

          <listitem>
            <para>Then follows (after a blank line) a custom message explaing
            what was done. It should be written in a style that serves well
            for a change log read by users. In case of breaking changes give a
            hint on what needs to be changed by the user.</para>
          </listitem>

          <listitem>
            <para>If corresponding tickets exist, mention the ticket numbers
            using footer lines after another blank line and use the following
            actions:<variablelist>
                <varlistentry>
                  <term><markup>Fixes:
                  #<replaceable>&lt;number&gt;</replaceable></markup></term>

                  <listitem>
                    <para>If the change fixes a bug.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><markup>Resolves:
                  #<replaceable>&lt;number&gt;</replaceable></markup></term>

                  <listitem>
                    <para>If the change resolves a feature request or
                    task.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term><markup>Relates to:
                  #<replaceable>&lt;number&gt;</replaceable></markup></term>

                  <listitem>
                    <para>If the change relates to an issue but does not
                    resolve or fix it.</para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </listitem>
        </itemizedlist></para>

      <para><example>
          <title>A commit messages following the rules...</title>

          <literallayout>[~TASK] FLOW3 (MVC): Short (50 chars or less) summary of changes

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the present tense: "Fix bug" and not "Fixed
bug."  This convention matches up with commit messages generated by
commands like git merge and git revert.

Further paragraphs come after blank lines.

* Bullet points are okay, too
* An asterisk is used for the bullet, it can bepreceded by a single
  space. This format is rendered correctly by Forge (redmine)
* Use a hanging indent

Resolves: #123
Resolves: #456
Relates to: #789</literallayout>
        </example></para>
    </section>
  </section>

  <section xml:id="flow3.codingguidelines.sourcecodedocumentation">
    <title>Source Code Documentation</title>

    <para>All code must be documented with inline comments. The syntax is
    similar to that known from the Java programming language (JavaDoc). This
    way code documentation can automatically be generated using <link
    xl:href="http://pear.php.net/package/PHP_UML">PHP_UML</link>.</para>

    <section>
      <title>Documentation Blocks</title>

      <para>A file contains different documentation blocks, relating to the
      class in the file and the members of the class. A documentation block is
      always used for the entity it precedes.</para>

      <section>
        <title>Class documentation</title>

        <para>Classes have their own documentation block describing the
        classes purpose, assigning a package and subpackage. Very often the
        code within a class is expanded and modified by a number of authors.
        We therefore recommend to add the names of the developers to the
        method documentation. An exception should be the documentation for
        interfaces where you list all authors in the interface documentation.
        Exceptions itself never have an author annotation.</para>

        <example>
          <title>Standard class documentation block</title>

          <programlisting language="php">/**
 * First sentence is short description. Then you can write more, just as you like
 *
 * Here may follow some detailed description about what the class is for.
 *
 * Paragraphs are seperated by a empty line.
 *
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public ↩
      License, version 3 or later
 */
class SomeClass {
 ...
}</programlisting>
        </example>

        <example>
          <title>Standard interface documentation block</title>

          <programlisting language="php">/**
 * First sentence is short description. Then you can write more, just as you like
 *
 * Here may follow some detailed description about what the interface is for.
 *
 * Paragraphs are seperated by a empty line.
 *
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public ↩
      License, version 3 or later
 * @author Your Name &lt;your@email.here&gt;
 */
interface SomeInterface {
 ...
}</programlisting>
        </example>

        <example>
          <title>Standard exception documentation block</title>

          <programlisting language="php">/**
 * First sentence is short description. Then you can write more, just as you like
 *
 * Here may follow some detailed description about what the exception is for.
 *
 * Paragraphs are seperated by a empty line.
 *
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public ↩
      License, version 3 or later
 */
class SomeException extends \Exception {
 ...
}</programlisting>
        </example>

        <para>Additional tags or annotations, such as @see or @aspect, can be
        added as needed.</para>
      </section>

      <section>
        <title>Documenting variables, constants, includes</title>

        <para>Properties of a class should be documented as well. We use the
        short version for documenting them:<example>
            <title>Standard variable documentation block</title>

            <programlisting language="php">/**
 * A short description, very much recommended
 * @var string
 */
protected $title = 'Untitled';</programlisting>
          </example></para>
      </section>

      <section>
        <title>Method documentation</title>

        <para>For a method, at least all parameters and the return value must
        be documented. Please also add your name by using the @author tag. The
        @access tag must not be used as it makes no sense (we're using PHP
        &gt;= 5 for some reason, don't we?)<example>
            <title>Standard method documentation block</title>

            <programlisting language="php">/**
 * A description for this method
 *
 * Paragraphs are seperated by a empty line.
 *
 * @param \F3\Blog\Domain\Model\Post $post A post
 * @param string $someString This parameter should contain some string
 * @return void
 * @author Your Name &lt;your@email.here&gt;
 */
public function addStringToPost(\F3\Blog\Domain\Model\Post $post, $someString) {
 ...
}</programlisting>
          </example></para>

        <para>A special note about the <markup>@param</markup> tags: The
        parameter type and name are seperated by one space, not aligned. Do
        not put a colon after the parameter name. Always document the return
        type, even if it is void - that way it is clearly visible it hasn't
        just been forgotten (only constructors never have a
        <markup>@return</markup> annotation!).</para>
      </section>

      <section>
        <title>Testcase documentation</title>

        <para>Testcases need to be marked as being a test and can have some
        more annotations.<example>
            <title>Standard testcase documentation block</title>

            <para><programlisting language="php">/**
 * @test
 * @author Your Name &lt;your@email.here&gt;
 */
public function fooReturnsBarForQuux() {
 ...
}</programlisting></para>
          </example></para>
      </section>
    </section>

    <section>
      <title>Defining the Public API</title>

      <para>Not all methods with a public visibility are neccessarily part of
      the intended public API of a project. For FLOW3, only the methods
      explicitly defined as part of the public API will be kept stable and are
      intended for use by developers using FLOW3. Also the API documentation
      we produce will only cover the public API.<important>
          <para>When something in a class or an interface is annotated with
          <literal>@api</literal> make sure to also annotate the class or
          interface itself! Otherwise it will be ignored completely when
          official API documentation is rendered!</para>
        </important></para>

      <para>To mark a method as part of the public API, include an
      <markup>@api</markup> annotation for it in the docblock.<example>
          <title>Defining the public API</title>

          <programlisting language="php">/**
 * This method is part of the public API.
 *
 * @return void
 * @author Your Name &lt;your@email.here&gt;
 * @api
 */
public function fooBar() {
 ...
}</programlisting>
        </example></para>
    </section>

    <section>
      <title>Overview of Documentation Annotations</title>

      <para>There are not only documentation annotations that can be used. In
      FLOW3 annotations are also used in the MVC component, for defining
      aspects and advices for the AOP framework as well as for giving
      instructions to the Persistence framework. See the individual chapters
      for information on their purpose and use.</para>

      <para>Here is a list of annotations used within the project. They are
      grouped by use case and the order given here should be kept for the sake
      of consistency.<itemizedlist>
          <title>Interface Documentation</title>

          <listitem>
            <para>@license</para>
          </listitem>

          <listitem>
            <para>@author</para>
          </listitem>

          <listitem>
            <para>@api</para>
          </listitem>

          <listitem>
            <para>@since</para>
          </listitem>

          <listitem>
            <para>@deprecated</para>
          </listitem>
        </itemizedlist><itemizedlist>
          <title>Class Documentation</title>

          <listitem>
            <para>@license</para>
          </listitem>

          <listitem>
            <para>@api</para>
          </listitem>

          <listitem>
            <para>@since</para>
          </listitem>

          <listitem>
            <para>@deprecated</para>
          </listitem>

          <listitem>
            <para>@entity</para>
          </listitem>

          <listitem>
            <para>@valueobject</para>
          </listitem>

          <listitem>
            <para>@scope</para>
          </listitem>

          <listitem>
            <para>@aspect</para>
          </listitem>
        </itemizedlist><itemizedlist>
          <title>Property Documentation</title>

          <listitem>
            <para>@var</para>
          </listitem>

          <listitem>
            <para>@introduce</para>
          </listitem>

          <listitem>
            <para>@uuid</para>
          </listitem>

          <listitem>
            <para>@identity</para>
          </listitem>

          <listitem>
            <para>@transient</para>
          </listitem>

          <listitem>
            <para>@lazy</para>
          </listitem>

          <listitem>
            <para>@api</para>
          </listitem>

          <listitem>
            <para>@since</para>
          </listitem>

          <listitem>
            <para>@deprecated</para>
          </listitem>
        </itemizedlist><itemizedlist>
          <title>Constructor Documentation</title>

          <listitem>
            <para>@param</para>
          </listitem>

          <listitem>
            <para>@throws</para>
          </listitem>

          <listitem>
            <para>@author</para>
          </listitem>

          <listitem>
            <para>@api</para>
          </listitem>

          <listitem>
            <para>@since</para>
          </listitem>

          <listitem>
            <para>@deprecated</para>
          </listitem>
        </itemizedlist><itemizedlist>
          <title>Method Documentation</title>

          <listitem>
            <para>@param</para>
          </listitem>

          <listitem>
            <para>@return</para>
          </listitem>

          <listitem>
            <para>@throws</para>
          </listitem>

          <listitem>
            <para>@validate</para>
          </listitem>

          <listitem>
            <para>@dontvalidate</para>
          </listitem>

          <listitem>
            <para>@author</para>
          </listitem>

          <listitem>
            <para>@signal</para>
          </listitem>

          <listitem>
            <para>@api</para>
          </listitem>

          <listitem>
            <para>@since</para>
          </listitem>

          <listitem>
            <para>@deprecated</para>
          </listitem>

          <listitem>
            <para>@pointcut</para>
          </listitem>

          <listitem>
            <para>@afterreturning</para>
          </listitem>

          <listitem>
            <para>@afterthrowing</para>
          </listitem>

          <listitem>
            <para>@around</para>
          </listitem>

          <listitem>
            <para>@before</para>
          </listitem>
        </itemizedlist><itemizedlist>
          <title>Testscase Documentation</title>

          <listitem>
            <para>@test</para>
          </listitem>

          <listitem>
            <para>@dataProvider</para>
          </listitem>

          <listitem>
            <para>@expectedException</para>
          </listitem>

          <listitem>
            <para>@author</para>
          </listitem>
        </itemizedlist></para>

      <note>
        <para>Additional annotations (more or less only the
        <literal>@todo</literal> and <literal>@see</literal> come to mind
        here), should be placed after all other annotations.</para>
      </note>
    </section>
  </section>

  <section xml:id="flow3.codingguidelines.bestpractices">
    <title>Best Practices</title>

    <section>
      <title>FLOW3</title>

      <para>This section gives you an overview of FLOW3's coding rules and
      best practices.</para>

      <section>
        <title>Error Handling and Exceptions</title>

        <para>FLOW3 makes use of a hierarchy for its exception classes. The
        general rule is to throw preferably specific exceptions and usually
        let them bubble up until a place where more general exceptions are
        catched. Consider the following example:</para>

        <para>Some method tried to retrieve an object from the object manager.
        However, instead of providing a string containing the object name, the
        method passed an object (of course not on purpose - something went
        wrong). The object manager now throws an
        <classname>InvalidObjectName</classname> exception. In order to catch
        this exception you can, of course, catch it specifically - or only
        consider a more general <classname>Object</classname> exception (or an
        even more general <classname>FLOW3</classname> exception). This all
        works because we have the following hierarchy:</para>

        <literallayout>+ \F3\FLOW3\Exception
  + \F3\FLOW3\Object\Exception
    + \F3\FLOW3\Object\Exception\InvalidObjectNameException</literallayout>

        <section>
          <title>Throwing an exception</title>

          <para>When throwing an exception, make sure to provide a clear error
          message and an error code being the unix timestamp of when you write
          the <function>throw</function> statement. That error code must be
          unique, so watch out when doing copy and paste!</para>

          <para>For every exception there should be a page on the TYPO3 wiki,
          as exception messages link to that page, identified by the error
          code (unix timestamp).</para>
        </section>
      </section>

      <section>
        <title>Unit Testing</title>

        <para>Some notes for a start:<itemizedlist>
            <listitem>
              <para>Never use the object manager or factory in unit tests! If
              they are needed, mock them.</para>
            </listitem>

            <listitem>
              <para>Avoid tests for the scope of an object. Those tests test
              the object factory, rather then the test target. Such a test
              should be done by checking for the presence of an expected
              @scope annotation – eventually we will find an elegant way for
              this.</para>
            </listitem>
          </itemizedlist></para>
      </section>

      <section>
        <title>Cross Platform Coding</title>

        <para><itemizedlist>
            <listitem>
              <para>When concatenating paths, always use
              <methodname>\F3\FLOW3\Utility\Files::concatenatePaths()</methodname>
              to avoid trouble.</para>
            </listitem>
          </itemizedlist></para>
      </section>
    </section>

    <section>
      <title>PHP in General</title>

      <itemizedlist>
        <listitem>
          <para>All code should be object oriented. This means there should be
          no functions outside classes if not absolutely necessary. If you
          need a "container" for some helper methods, consider creating a
          static class.</para>
        </listitem>

        <listitem>
          <para>All code must make use of PHP5 / PHP6 advanced features for
          object oriented programming.<itemizedlist>
              <listitem>
                <para>Use PHP namespaces (see <link
                xl:href="http://www.php.net/manual/language.namespaces.php">http://www.php.net/manual/language.namespaces.php</link>)</para>
              </listitem>

              <listitem>
                <para>Always declare the scope (public, protected, private) of
                methods and member variables</para>
              </listitem>

              <listitem>
                <para>Make use of iterators and exceptions, have a look at the
                SPL (see <link
                xl:href="http://www.php.net/manual/ref.spl.php">http://www.php.net/manual/ref.spl.php</link>
                and <link
                xl:href="http://www.php.net/~helly/php/ext/spl/">http://www.php.net/~helly/php/ext/spl/</link>)</para>
              </listitem>

              <listitem>
                <para>Make use of type-hinting wherever possible (see <link
                xl:href="http://www.php.net/manual/language.oop5.typehinting.php">http://www.php.net/manual/language.oop5.typehinting.php</link>)</para>
              </listitem>
            </itemizedlist></para>
        </listitem>

        <listitem>
          <para>Always use <code>&lt;?php</code> as opening tags (never only
          <code>&lt;?</code>)</para>
        </listitem>

        <listitem>
          <para>Always use the closing tag <code>?&gt;</code> at the end of a
          file, don't leave it out (this ain't no Zend Framework, dude)</para>
        </listitem>

        <listitem>
          <para>Never use the shut-up operator <literal>@</literal> to
          suppress error messages. It makes debugging harder, is dirty style
          and slow as hell</para>
        </listitem>

        <listitem>
          <para>Add an encoding declaration as the first line of your PHP
          code, followed by the namespace declaration. For TYPO3 the encoding
          must be <acronym>UTF-8</acronym></para>

          <example>
            <title>Encoding and namespace statements for .php files</title>

            <programlisting language="php">&lt;?php
declare(ENCODING = 'utf-8');
namespace F3\Your\Stuff\Here;

...</programlisting>
          </example>
        </listitem>

        <listitem>
          <para>Prefer strict comparisons whenever possible, to avoid problems
          with truthy and falsy values that might behave different than what
          you expect. Here are some examples:<example>
              <title>Examples of good and bad comparisons</title>

              <para><programlisting language="php">if ($template)             // BAD
if (isset($template))      // GOOD
if ($template !== NULL))   // GOOD
if ($template !== ''))     // GOOD

if (strlen($template) &gt; 0) // BAD! strlen("-1") is greater than 0
if (is_string($template) &amp;&amp; strlen($template) &gt;0) // BETTER

if ($foo == $bar)          // BAD, avoid truthy comparisons
if ($foo != $bar)          // BAD, avoid falsy comparisons
if ($foo === $bar))        // GOOD
if ($foo !== $bar))        // GOOD</programlisting></para>
            </example><figure floatstyle="">
              <title>Truthy and falsy are fuzzy...</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="PHP_TrueFalse.jpg"/>
                </imageobject>
              </mediaobject>
            </figure></para>
        </listitem>

        <listitem>
          <para>Order of methods in classes. To gain a better overview, it
          helps if methods in classes are always ordered in a certain way. We
          prefer the following:<orderedlist>
              <listitem>
                <para>constructor</para>
              </listitem>

              <listitem>
                <para>injection methods</para>
              </listitem>

              <listitem>
                <para>initialization methods (including
                initializeObject())</para>
              </listitem>

              <listitem>
                <para>public methods</para>
              </listitem>

              <listitem>
                <para>protected methods</para>
              </listitem>

              <listitem>
                <para>private methods</para>
              </listitem>

              <listitem>
                <para>shutdown methods</para>
              </listitem>

              <listitem>
                <para>destructor</para>
              </listitem>
            </orderedlist></para>
        </listitem>

        <listitem>
          <para>Avoid double-negation. Instead of
          <literal>exportSystemView(..., $noRecurse)</literal> use
          <literal>exportSystemView(..., $recurse)</literal>. It is more
          logical to pass <constant>TRUE</constant> if you want recursion
          instead of having to pass <constant>FALSE</constant>. In general,
          parameters negating things are a bad idea.</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>Comments</title>

        <para>In general, comments are a good thing and we strive for creating
        a well-documented source code. However, inline comments can often be a
        sign for a bad code structure or method naming.<footnote>
            <para>This is also referred to as a bad "smell" in the theory of
            Refactoring. We highly recommend reading "Refactoring" by Martin
            Fowler - if you didn't already.</para>
          </footnote>As an example, consider the following code:<example>
            <title>Bad coding smell: Comments</title>

            <programlisting language="php">   // We only allow valid perso
if (is_object($p) &amp;&amp; strlen($p-&gt;lastN) &gt; 0 &amp;&amp; $p-&gt;hidden === FALSE &amp;&amp; ↩
  $this-&gt;environment-&gt;moonPhase === MOON_LIB::CRESCENT) {
   $xmM = $thd;
}</programlisting>
          </example></para>

        <para>This is a perfect case for the refactoring technique "extract
        method": In order to avoid the comment, create a new method which is
        as explanatory as the comment:</para>

        <example>
          <title>Smells better!</title>

          <programlisting language="php">if ($this-&gt;isValidPerson($person) {
   $xmM = $thd;
}</programlisting>
        </example>

        <para>Bottom line is: You may (and are encouraged to) use inline
        comments if they support the readability of your code. But always be
        aware of possible design flaws you probably try to hide with
        them.</para>
      </section>
    </section>
  </section>
</chapter>
