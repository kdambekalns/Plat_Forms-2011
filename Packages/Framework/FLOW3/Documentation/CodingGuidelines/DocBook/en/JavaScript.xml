<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>JavaScript Coding Guidelines</title>

  <para>Here, you will find an explanation of the JavaScript Coding Guidelines
  we use. Generally, we strive to follow the FLOW3 Coding Guidelines as
  closely as possible, with exceptions which make sense in the JavaScript
  context.</para>

  <para>This guideline explains mostly how we want JavaScript code to be
  formatted; and it does <emphasis>not</emphasis> deal with the TYPO3 Phoenix
  User Interface structure. If you want to know more about the TYPO3 Phoenix
  User Interface architecture, have a look into the "Phoenix User Interface
  Development" book.</para>

  <section>
    <title>Naming Conventions</title>

    <itemizedlist>
      <listitem>
        <para>one class per file, with the same naming convention as
        FLOW3.</para>

        <para>This means all classes are built like this:
        <code>F3.<replaceable>PackageKey</replaceable>.<replaceable>SubNamespace</replaceable>.<replaceable>ClassName</replaceable></code>,
        and this class is implemented in a JavaScript file located at
        <filename><replaceable>...
        Package</replaceable>/.../JavaScript/<replaceable>SubNamespace</replaceable>/<replaceable>ClassName</replaceable>.js</filename>.</para>

        <para>Right now, the base directory for JavaScript in FLOW3 packages
        <filename>Resources/Public/JavaScript</filename>, but this might still
        change.</para>

        <note>
          <para>In TYPO3 v4, the prefix is <code>TYPO3</code>. This means an
          extension should use <code>TYPO3.ExtensionKey</code> as base
          namespace, while the TYPO3 Core should use
          <code>TYPO3.Backend</code> as namespace.</para>
        </note>
      </listitem>

      <listitem>
        <para>We suggest that the base directory for JavaScript files is
        <filename>JavaScript</filename>.</para>
      </listitem>

      <listitem>
        <para>Files have to be encoded in UTF-8.</para>
      </listitem>

      <listitem>
        <para>Classes and namespaces are written in
        <code>UpperCamelCase</code>, while properties and methods are written
        in <code>lowerCamelCase</code>.</para>
      </listitem>

      <listitem>
        <para>The xtype of a class is always the fully qualified class name.
        Every class which can be instanciated needs to have an xtype
        declaration.</para>
      </listitem>

      <listitem>
        <para>Never create a class which has classes inside itself. Example:
        if the class <classname>F3.TYPO3.Foo</classname> exists, it is
        prohibited to create a class
        <classname>F3.TYPO3.Foo.Bar</classname>.You can easily check this: If
        a directory with the same name as the JavaScript file exists, this is
        prohibited.</para>

        <para>Here follows an example:</para>

        <programlisting>F3.TYPO3.Foo.Bar // implemented in .../Foo/Bar.js
F3.TYPO3.Foo.Bar = ...

F3.TYPO3.Foo // implemented in ...Foo.js
F3.TYPO3.Foo = ..... <emphasis>overriding the "Bar" class</emphasis></programlisting>

        <para>So, if the class <classname>F3.TYPO3.Foo.Bar</classname> is
        included <emphasis>before</emphasis>
        <classname>F3.TYPO3.Foo</classname>, then the second class definition
        completely overrides the <classname>Bar</classname> object. In order
        to prevent such issues, this constellation is forbidden.</para>
      </listitem>

      <listitem>
        <para>Every class, method and class property should have a doc
        comment.</para>
      </listitem>

      <listitem>
        <para>Private methods and properties should start with an underscore
        (<code>_</code>) and have a <code>@private</code> annotation.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Doc Comments</title>

    <para>Generally, doc comments follow the following form:</para>

    <programlisting>/**
 *
 */</programlisting>

    <para>See the sections below on which doc comments are available for the
    different elements (classes, methods, ...).</para>

    <para>We are using http://code.google.com/p/ext-doc/ for rendering an API
    documentation from the code, that's why types inside <code>@param</code>,
    <code>@type</code> and <code>@cfg</code> have to be written in curly
    brackets like this:</para>

    <programlisting>@param {String} theFirstParameter A Description of the first parameter
@param {My.Class.Name} theSecondParameter A description of the second parameter</programlisting>

    <para>Generally, we do not use <code>@api</code> annotations, as private
    methods and attributes are marked with <code>@private</code> and prefixed
    with an underscore. So, <emphasis>everything which is not marked as
    private belongs to the public API!</emphasis></para>

    <para>We are not sure yet if we should use <code>@author</code>
    annotations at all. (TODO Decide!)</para>

    <para>To make a reference to another method of a class, use the
    <code>{@link #methodOne This is a example link to method one}</code>
    syntax.</para>

    <para>If you want to do multiline doc comments, you need to format them
    with <code>&lt;br&gt;</code>, <code>&lt;pre&gt;</code> and other HTML
    tags. Example:</para>

    <programlisting>/**
 * Description of the class. Make it as long as needed,
 * feel free to explain how to use it.
 * This is a sample class &lt;br/&gt;
 * The file encoding should be utf-8 &lt;br/&gt;
 * UTF-8 Check: öäüß &lt;br/&gt;
 * {@link #methodOne This is a example link to method one}
 */</programlisting>
  </section>

  <section>
    <title>Class Definitions</title>

    <para>Classes can be declared singleton or prototype. A class is
    <emphasis>singleton</emphasis>, if only one instance of this class will
    exist at any given time. An class is of type
    <emphasis>prototype</emphasis>, if more than one object can be created
    from the class at run-time. Most classes will be of type
    <emphasis>prototype</emphasis>.</para>

    <para>You will find examples for both below.</para>

    <section>
      <title>Prototype Class Definitions</title>

      <example>
        <title>Example of a prototype class definition</title>

        <programlisting>Ext.ns("F3.TYPO3.Content");<co
            xml:id="prototypeClassDefinition.1" />

/*                                                                        *
 * This script belongs to the FLOW3 package "TYPO3".                      *
 *                                                                        *
 * It is free software; you can redistribute it and/or modify it under    *
 * the terms of the GNU General Public License as published by the Free   *
 * Software Foundation, either version 3 of the License, or (at your      *
 * option) any later version.                                             *
 *                                                                        *
 * This script is distributed in the hope that it will be useful, but     *
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-    *
 * TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General      *
 * Public License for more details.                                       *
 *                                                                        *
 * You should have received a copy of the GNU General Public License      *
 * along with the script.                                                 *
 * If not, see http://www.gnu.org/licenses/gpl.html                       *
 *                                                                        *
 * The TYPO3 project - inspiring people to share!                         *
 *                                                                        */

/**
 * @class F3.TYPO3.Content.FrontendEditor<co
            xml:id="prototypeClassDefinition.2" />
 *
 * The main frontend editor.<co xml:id="prototypeClassDefinition.3" />
 *
 * @namespace F3.TYPO3.Content<co xml:id="prototypeClassDefinition.4" />
 * @extends Ext.Container
 */
F3.TYPO3.Content.FrontendEditor = Ext.extend(Ext.Container, {<co
            xml:id="prototypeClassDefinition.5" />
	// here comes the class contents
});
Ext.reg('F3.TYPO3.Content.FrontendEditor', F3.TYPO3.Content.FrontendEditor);<co
            xml:id="prototypeClassDefinition.6" /></programlisting>

        <calloutlist>
          <callout arearefs="prototypeClassDefinition.1">
            <para>At the very beginning of the file is the namespace
            declaration of the class, followed by a newline.</para>
          </callout>

          <callout arearefs="prototypeClassDefinition.2">
            <para>Then follows the class documentation block, which
            <emphasis>must</emphasis> start with the <code>@class</code>
            declaration in the first line.</para>
          </callout>

          <callout arearefs="prototypeClassDefinition.3">
            <para>Now comes a description of the class, possibly with
            examples.</para>
          </callout>

          <callout arearefs="prototypeClassDefinition.4">
            <para>Afterwards <emphasis>must</emphasis> follow the namespace of
            the class and the information about object extension.</para>
          </callout>

          <callout arearefs="prototypeClassDefinition.5">
            <para>Now comes the actual class definition, using
            <code>Ext.extend</code>.</para>
          </callout>

          <callout arearefs="prototypeClassDefinition.6">
            <para>As the last line of the class, it follows the xType
            registration. We always use the fully qualified class name as
            xtype</para>
          </callout>
        </calloutlist>
      </example>

      <para>Usually, the constructor of the class receives a hash of
      parameters. The possible configuration options need to be documented
      inside the class with the <code>@cfg</code> annotation:</para>

      <programlisting>F3.TYPO3.Content.FrontendEditor = Ext.extend(Ext.Container, {
	/**
	 * An explanation of the configuration option followed
	 * by a blank line.
	 * 
	 * @cfg {Number} configTwo
	 */
	configTwo: 10
	...
}</programlisting>
    </section>

    <section>
      <title>Singleton Class Definitions</title>

      <para>Now comes a singleton class definition. You will see that it is
      very similar to a prototype class definition, we will only highlight the
      differences.</para>

      <example>
        <title>Example of a singleton class definition</title>

        <programlisting>Ext.ns("F3.TYPO3.Core");

/*                                                                        *
 * This script belongs to the FLOW3 package "TYPO3".                      *
 *                                                                        *
 * It is free software; you can redistribute it and/or modify it under    *
 * the terms of the GNU General Public License as published by the Free   *
 * Software Foundation, either version 3 of the License, or (at your      *
 * option) any later version.                                             *
 *                                                                        *
 * This script is distributed in the hope that it will be useful, but     *
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-    *
 * TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General      *
 * Public License for more details.                                       *
 *                                                                        *
 * You should have received a copy of the GNU General Public License      *
 * along with the script.                                                 *
 * If not, see http://www.gnu.org/licenses/gpl.html                       *
 *                                                                        *
 * The TYPO3 project - inspiring people to share!                         *
 *                                                                        */

/**
 * @class F3.TYPO3.Core.Application
 *
 * The main entry point which controls the lifecycle of the application.
 *
 * @namespace F3.TYPO3.Core
 * @extends Ext.util.Observable
 * @singleton<co xml:id="singletonClassDefinition.1" />
 */
F3.TYPO3.Core.Application = Ext.apply(new Ext.util.Observable, {<co
            xml:id="singletonClassDefinition.2" />
	// here comes the class contents
});<co xml:id="singletonClassDefinition.3" /></programlisting>

        <calloutlist>
          <callout arearefs="singletonClassDefinition.1">
            <para>You should add a <code>@singleton</code> annotation to the
            class doc comment after the <code>@namespace</code> and
            <code>@extends</code> annotation</para>
          </callout>

          <callout arearefs="singletonClassDefinition.2">
            <para>In singleton classes, you use <code>Ext.apply</code>. Note
            that you need to use <code>new</code> to instanciate the base
            class.</para>
          </callout>

          <callout arearefs="singletonClassDefinition.3">
            <para>There is <emphasis>no xType</emphasis> registration in
            singletons, as they are available globally anyhow.</para>
          </callout>
        </calloutlist>
      </example>
    </section>

    <section>
      <title>Class Doc Comments</title>

      <para>Class Doc Comments should always be in the following order:</para>

      <itemizedlist>
        <listitem>
          <para><code>@class <replaceable>Name.Of.Class</replaceable></code>
          (required)</para>
        </listitem>

        <listitem>
          <para>Then follows a description of the class, which can span
          multiple lines. Before and after this description should be a a
          blank line.</para>
        </listitem>

        <listitem>
          <para><code>@namespace
          <replaceable>Name.Of.Namespace</replaceable></code>
          (required)</para>
        </listitem>

        <listitem>
          <para><code>@extends
          <replaceable>Name.Of.BaseClass</replaceable></code>
          (required)</para>
        </listitem>

        <listitem>
          <para><code>@singleton</code> (required if the class is a
          singleton)</para>
        </listitem>
      </itemizedlist>

      <para>If the class has a non-empty constructor, the following doc
      comments need to be added as well, after a blank line:</para>

      <itemizedlist>
        <listitem>
          <para>⁄<code>@constructor</code></para>
        </listitem>

        <listitem>
          <para><code>@param {<replaceable>type</replaceable>}
          <replaceable>nameOfParameter</replaceable> <replaceable>description
          of parameter</replaceable></code> for every parameter of the
          constructor</para>
        </listitem>
      </itemizedlist>

      <example>
        <title>Example of a class doc comment without constructor</title>

        <programlisting>/**
 * @class F3.TYPO3.Foo.Bar
 *
 * Some Description of the class,
 * which can possibly span multiple lines
 *
 * @namespace F3.TYPO3.Foo
 * @extends F3.TYPO3.Core.SomeOtherClass
 */</programlisting>
      </example>

      <example>
        <title>Example of a class doc comment with constructor</title>

        <programlisting>/**
 * @class F3.TYPO3.Foo.ClassWithConstructor
 *
 * This class has a constructor!
 *
 * @namespace F3.TYPO3.Foo
 * @extends F3.TYPO3.Core.SomeOtherClass
 *
 * @constructor
 * @param {String} id The ID which to use
 */</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Method Definitions</title>

    <para>Methods should be documented the following way:</para>

    <example>
      <title>Example of a method comment</title>

      <programlisting>...
F3.TYPO3.Core.Application = Ext.apply(new Ext.util.Observable, { // this is just an example class definition
	... propery definitions ...
	/**
	 * This is a method declaration; and the
	 * explanatory text is followed by a newline.
	 *
	 * @param {String} param1 Parameter name
	 * @param {String} param2 (Optional) Optional parameter
	 * @return {Boolean} Return value
	 */
	aPublicMethod: function(param1, param2) {
		return true;
	},<co xml:id="exampleMethodComment.1" />

	/**
	 * this is a private method of this class,
	 * the private anotation marks them an prevent that they
	 * are listed in the api doc. As they are private, they
	 * have to start with an underscore as well.
	 *
	 * @return {void}
	 * @private
	 */
	_sampleMethod: function() {
	}
}
...</programlisting>

      <calloutlist>
        <callout arearefs="exampleMethodComment.1">
          <para>There should be a blank line between methods.</para>
        </callout>
      </calloutlist>
    </example>

    <para>Contrary to what is defined in the FLOW3 PHP Coding Guidelines,
    methods which are public <emphasis>automatically belong to the public
    API</emphasis>, without an <code>@api</code> annotation. Contrary, methods
    which do <emphasis>not belong to the public API</emphasis> need to begin
    with an underscore and have the <code>@private</code> annotation.</para>

    <itemizedlist>
      <listitem>
        <para>All methods need to have JSDoc annotations.</para>
      </listitem>

      <listitem>
        <para>Every method needs to have a <code>@return</code> annotation. In
        case the method does not return anything, a <code>@return
        {void}</code> is needed, otherwise the concrete return value should be
        described.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Property Definitions</title>

    <para>All properties of a class need to be properly documented as well,
    with an <code>@type</code> annotation. If a property is private, it should
    start with an underscore and have the <code>@private</code> annotation at
    the last line of its doc comment.</para>

    <programlisting>...
F3.TYPO3.Core.Application = Ext.apply(new Ext.util.Observable, { // this is just an example class definition
	/**
	 * Explanation of the property
	 * which is followed by a newline
	 *
	 * @type {String}
	 */
	propertyOne: 'Hello',

	/**
	 * Now follows a private property
	 * which starts with an underscore.
	 *
	 * @type {Number}
	 * @private
	 */
	_thePrivateProperty: null,
	...
}</programlisting>
  </section>

  <section>
    <title>Code Style</title>

    <itemizedlist>
      <listitem>
        <para>use single quotes(') instead of double quotes(") for string
        quoting</para>
      </listitem>

      <listitem>
        <para>Multiline strings (using <code>\</code>) are forbidden. Instead,
        multiline strings should be written like this:</para>

        <programlisting>'Some String' +
' which spans' +
' multiple lines'</programlisting>
      </listitem>

      <listitem>
        <para>There is no limitation on line length.</para>
      </listitem>

      <listitem>
        <para>JavaScript Constants (true, false, null) should be written
        lowercase, and not uppercase.</para>
      </listitem>

      <listitem>
        <para>Custom JavaScript Constants should be avoided.</para>
      </listitem>

      <listitem>
        <para>Use a single <code>var</code> statement at the top of a method
        to declare all variables. Example:</para>

        <programlisting>function() {
	var myVariable1, myVariable2, someText;
	// now, use myVariable1, ....
}</programlisting>

        <para>Please do <emphasis>not assign</emphasis> values to the
        variables in the initialization, except empty default values:</para>

        <programlisting>// DO:
function() {
	var myVariable1, myVariable2;
	...
}
// DO:
function() {
	var myVariable1 = {}, myVariable2 = [], myVariable3;
	...
}
// DON'T
function() {
	var variable1 = 'Hello',
			variable2 = variable1 + ' World';
	...
}</programlisting>
      </listitem>

      <listitem>
        <para>We use <emphasis>a single TAB</emphasis> for indentation.</para>
      </listitem>

      <listitem>
        <para>Use inline comments sparingly, they are often a hint that a new
        method must be introduced.</para>

        <para>Inline Comments must be indented <emphasis>one level
        deeper</emphasis> than the current nesting level. Example:</para>

        <programlisting>function() {
	var foo;
		// Explain what we are doing here.
	foo = '123';
}</programlisting>
      </listitem>

      <listitem>
        <para>White Spaces around control structures like <code>if</code>,
        <code>else</code>, ... should be inserted like in the FLOW3
        CGLs:</para>

        <programlisting>if (myExpression) {
	// if part
} else {
	// Else Part
}</programlisting>
      </listitem>

      <listitem>
        <para>Arrays and Objects should <emphasis>never</emphasis> have a
        trailing comma after their last element,</para>
      </listitem>

      <listitem>
        <para>Arrays and objects should be formatted in the following
        way:</para>

        <programlisting>[
	{
		foo: 'bar'    
	}, {
		x: y
	}
]</programlisting>
      </listitem>

      <listitem>
        <para>Method calls should be formatted the following way:</para>

        <programlisting>// for simple parameters:
new Ext.blah(options, scope, foo);
object.myMethod(foo, bar, baz);

// when the method takes a <emphasis>single</emphasis> parameter of type <emphasis>object</emphasis> as argument, and this object is specified directly in place:
new Ext.Panel({
	a: 'b',
	c: 'd'
});

// when the method takes more parameters, and one is a configuration object which is specified in place:
new Ext.blah(
	{
		foo: 'bar'
	},
	scope,
	options
);</programlisting>
      </listitem>
    </itemizedlist>

    <para>-&gt; TODO: are there JS Code Formatters / Indenters, maybe the
    Spket JS Code Formatter?</para>

    <section>
      <title>Using JSLint to validate your JavaScript</title>

      <para>JSLint is a JavaScript program that looks for problems in
      JavaScript programs. It is a code quality tool. When C was a young
      programming language, there were several common programming errors that
      were not caught by the primitive compilers, so an accessory program
      called <code>lint</code> was developed that would scan a source file,
      looking for problems. <code>jslint</code> is the same for
      JavaScript.</para>

      <para>JavaScript code ca be validated on-line at http://www.jslint.com/.
      When validating the JavaScript code, "The Good Parts" family options
      should be set. For that purpose, there is a button "The Good Parts" to
      be clicked.</para>

      <para>Instead of using it online, you can also use JSLint locally, which
      is now described. For the sake of convenience, the small tutorial bellow
      demonstrates how to use JSlint with the help of CLI wrapper to enable
      recursive validation among directories which streamlines the validation
      process.</para>

      <itemizedlist>
        <listitem>
          <para>Download Rhino from http://www.mozilla.org/rhino/download.html
          and put it for instance into /Users/john/WebTools/Rhino.</para>
        </listitem>

        <listitem>
          <para>Download JSLint.js (@see attachment "jslint.js", line
          5667-5669 contains the configuration we would like to have, still to
          decide) (TODO)</para>
        </listitem>

        <listitem>
          <para>Download jslint.php (@see attachment "jslint.php" TODO), for
          example into /Users/fudriot/WebTools/JSLint</para>
        </listitem>

        <listitem>
          <para>Open and edit path in jslint.php -&gt; check variable
          $rhinoPath and $jslintPath</para>
        </listitem>

        <listitem>
          <para>Add an alias to make it more convenient in the
          terminal:<programlisting>alias jslint '/Users/fudriot/WebTools/JSLint/jslint.php </programlisting></para>
        </listitem>
      </itemizedlist>

      <para>Now, you can use JSLint locally:</para>

      <programlisting>// scan one file or multi-files
jslint file.js
jslint file-1.js file-2.js

//scan one directory or multi-directory
jslint directory
jslint directory-1 directory-2

//scan current directory
jslint .</programlisting>

      <para>It is also possible to adjust the validation rules JSLint uses. At
      the end of file "jslint.js", it is possible to customize the rules to be
      checked by JSlint by changing options' value. By default, the options
      are taken over the book "JavaScript: The Good Parts" which is written by
      the same author of JSlint.</para>

      <para>Below are the options we use for TYPO3 v5:</para>

      <programlisting>bitwise: true, eqeqeq: true, immed: true,newcap: true, nomen: false, onevar: true, plusplus: false, regexp: true, rhino: true, undef: false, white: false, strict: true
</programlisting>

      <para>In case some files needs to be evaluated with special rules, it is
      possible to add a comment on the top of file which can override the
      default ones:</para>

      <programlisting>/*jslint white: true, evil: true, laxbreak: true, onevar: true, undef: true, nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true, immed: true */ </programlisting>

      <para>More information about the meaning and the reasons of the rules
      can be found at http://www.jslint.com/lint.html</para>
    </section>

    <section>
      <title>Event Handling</title>

      <para>When registering an event handler, always use explicit functions
      instead of inline functions to allow overriding of the event
      handler.</para>

      <para>Additionally, this function needs to be prefixed with
      <code>on</code> to mark it as event handler function. Below follows an
      example for good and bad code.</para>

      <example>
        <title>Good Event Handler Code</title>

        <programlisting>F3.TYPO3.Application.on('theEventName', this._onCustomEvent, this);</programlisting>
      </example>

      <example>
        <title>Bad Event Handler Code</title>

        <programlisting>F3.TYPO3.Application.on(
  'theEventName',
  function() {
    alert('Text');
  }, 
  this
);</programlisting>
      </example>

      <para>All events need to be explicitely documented inside the class
      where they are fired onto with an <code>@event</code> annotation.</para>

      <para>Here follows an example:</para>

      <programlisting>F3.TYPO3.Core.Application = Ext.apply(new Ext.util.Observable, { // this is just an example class definition
	/**
	 * @event eventOne Event declaration
	 */

	/**
	 * @event eventTwo Event with parameters
	 * @param {String} param1 Parameter name
	 * @param {Object} param2 Parameter name
	 * &lt;ul&gt;
	 * &lt;li&gt;&lt;b&gt;property1:&lt;/b&gt; description of property1&lt;/li&gt;
	 * &lt;li&gt;&lt;b&gt;property2:&lt;/b&gt; description of property2&lt;/li&gt;
	 * &lt;/ul&gt;
	 */
	...
}</programlisting>

      <para>Additionally, make sure to document if the scope of the event
      handler is not set to <code>this</code>, i.e. does not point to its
      class, as the user expects this.</para>
    </section>
  </section>

  <section>
    <title>ExtJS specific things</title>

    <para>TODO</para>

    <para>-&gt; explain initializeObject</para>

    <para>-&gt; how to extend Ext components</para>

    <para>-&gt; can be extended by using constructer() not initComponets()
    like it is for panels and so on</para>

    <section>
      <title>How to extend data stores</title>

      <programlisting>F3.TYPO3.Content.DummyStore = Ext.extend(Ext.data.Store, {

	constructor: function(cfg) {
		cfg = cfg || {};
		var config = Ext.apply(
			{
				autoLoad: true
			},
			cfg
		);

		F3.TYPO3.Content.DummyStore.superclass.constructor.call(
			this,
			config
		);
	}
});
Ext.reg('F3.TYPO3.Content.DummyStore', F3.TYPO3.Content.DummyStore);</programlisting>
    </section>
  </section>

  <section>
    <title>Unit Testing</title>

    <para>It's highly recommended to write unit tests for javascript classes.
    Unit tests should be located in the following location:
    <filename>Package/Tests/JavaScript/...</filename></para>

    <para>The structure below this folder should reflect the structure below
    <filename>Package/Resources/Public/JavaScript/...</filename> if
    possible.</para>

    <para>The namespace for the Unit test classes is
    <classname>F3.Package.Tests</classname>.</para>

    <para>TODO: Add some more information about Unit Testing for JS</para>

    <para>TODO: Add note about the testrunner when it's added to the
    package</para>

    <para>TODO: http://developer.yahoo.com/yui/3/test/</para>
  </section>
</chapter>
